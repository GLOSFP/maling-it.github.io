{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pengenalan \u00b6 Di web ini akan dimasukkan beberapa informasi tentang dunia IT dan dokumentasi pembelajaran Sejarah \u00b6 MalingIT adalah sebuah komunitas yang didirikan pada 22 Februari 2021 di telegram. Pada awalnya maling-it didirikan untuk mengumpulkan pdf atau ebook tentang programming dan komputer yang sudah ada di beberapa channel telegram yang membahas hal tersebut. Selanjutnya pada 18 Mei 2021 Maling-it menambahkan bot untuk mempermudah pencarian file yang dikirim ke channel telegram. itu adalah sejarah singkatnya dari maling-it, sebenarnya ceritanya cukup panjang dan mungkin akan di update lagi di kemudian hari. Filosofi \u00b6 Menurut KBBI, Maling artinya adalah orang yang mencuri secara sembunyi-sembunyi, sedangkan IT adalah kependekan dari Informasi Teknologi. Jadi dapat di simpulkan bahwa Maling IT merupakan salah satu channel yang mengumpulkan file-file dari channel telegram yang lain (niat hati mengumpulkan dan menjadi maling modern). Selain itu, menurut member juga menyebutkan bahwa Maling IT adalah Perpustakaan elektronik yang menyediakan buku-buku programming secara gratis. Kontribusi \u00b6 Jika menemukan kesalahan dalam penulisan kata atau ingin menambahkan konten baru, silahkan buat perubahan. anda juga bisa menggunakan tombol dibagian kanan atas di setiap artikel/konten untuk menambahkan ke pull request. jika tidak tau apa maksudnya, anda juga bisa membuat issue atau kirim email Terimakasih \u00b6 Jika anda suka dengan artikel atau konten dari kami dan ingin menunjukkan support, silahkan lihat bagian donasi atau kontribusi di beberapa projek maling-it","title":"Pengenalan"},{"location":"#pengenalan","text":"Di web ini akan dimasukkan beberapa informasi tentang dunia IT dan dokumentasi pembelajaran","title":"Pengenalan"},{"location":"#sejarah","text":"MalingIT adalah sebuah komunitas yang didirikan pada 22 Februari 2021 di telegram. Pada awalnya maling-it didirikan untuk mengumpulkan pdf atau ebook tentang programming dan komputer yang sudah ada di beberapa channel telegram yang membahas hal tersebut. Selanjutnya pada 18 Mei 2021 Maling-it menambahkan bot untuk mempermudah pencarian file yang dikirim ke channel telegram. itu adalah sejarah singkatnya dari maling-it, sebenarnya ceritanya cukup panjang dan mungkin akan di update lagi di kemudian hari.","title":"Sejarah"},{"location":"#filosofi","text":"Menurut KBBI, Maling artinya adalah orang yang mencuri secara sembunyi-sembunyi, sedangkan IT adalah kependekan dari Informasi Teknologi. Jadi dapat di simpulkan bahwa Maling IT merupakan salah satu channel yang mengumpulkan file-file dari channel telegram yang lain (niat hati mengumpulkan dan menjadi maling modern). Selain itu, menurut member juga menyebutkan bahwa Maling IT adalah Perpustakaan elektronik yang menyediakan buku-buku programming secara gratis.","title":"Filosofi"},{"location":"#kontribusi","text":"Jika menemukan kesalahan dalam penulisan kata atau ingin menambahkan konten baru, silahkan buat perubahan. anda juga bisa menggunakan tombol dibagian kanan atas di setiap artikel/konten untuk menambahkan ke pull request. jika tidak tau apa maksudnya, anda juga bisa membuat issue atau kirim email","title":"Kontribusi"},{"location":"#terimakasih","text":"Jika anda suka dengan artikel atau konten dari kami dan ingin menunjukkan support, silahkan lihat bagian donasi atau kontribusi di beberapa projek maling-it","title":"Terimakasih"},{"location":"komunitas/","text":"Komunitas \u00b6 Tempat diskusi dan bertanya: Telegram: @RumahMalingIT Forum Github: Link","title":"Komunitas"},{"location":"komunitas/#komunitas","text":"Tempat diskusi dan bertanya: Telegram: @RumahMalingIT Forum Github: Link","title":"Komunitas"},{"location":"kontak/","text":"Kontak \u00b6 Hubungi admin: Email: zxce3 at protonmail.com Telegram: @zxce3","title":"Kontak"},{"location":"kontak/#kontak","text":"Hubungi admin: Email: zxce3 at protonmail.com Telegram: @zxce3","title":"Kontak"},{"location":"belajar/","text":"belajar \u00b6","title":"Belajar"},{"location":"belajar/#belajar","text":"","title":"belajar"},{"location":"belajar/git/","text":"Belajar Git \u00b6 Note sumber panduan ini dari https://git-scm.com/book/id/v2/ Apa itu git? \u00b6 Saat ini, ada banyak tools yang digunakan oleh programmer dan developer. Salah satunya adalah Git yang menjadi tool penting dalam pengembangan sebuah website. Jangan keliru, Git bukan merupakan bahasa pemograman, tetapi sangat penting bagi programmer yang bekerja di hampir semua bahasa pemrograman. Untuk mengetahui apa itu Git, Anda perlu mengetahui fungsi Git yaitu sebagai control system untuk menjalankan proyek pengembangan software. Git merupakan tool yang dikembangkan oleh pengembang sistem kernel dari sistem operasi Linux yaitu Linus Torvalds pada tahun 2005. Berbasis pengontrol versi atau Version Control System (VCS), Git bertugas untuk mencatat perubahan seluruh file atau repository dari suatu project baik besar maupun kecil. Tujuan penggunaan Git untuk mengelola versi source code program dengan menentukan baris dan kode yang akan ditambah atau diganti. Ada ratusan proyek software yang mengandalkan Git sebagai version control system mereka, termasuk proyek komersial serta open source. Biasanya developer software menggunakan Git untuk distributed version control (VCS terdistribusi) yang bertujuan untuk menyimpan database tidak hanya ke satu tempat saja. Namun, semua orang yang terlibat dalam penyusunan kode dapat menyimpan database ini. Prosedur yang diterapkan ini dapat membantu antar divisi project untuk memantau dan menghubungkan (merge) antar ekstensi yang berbeda dengan mudah. Sehingga, aplikasi yang dibuat oleh sebuah tim project dapat berfungsi tanpa menghubungkan secara manual. Fitur pada Git \u00b6 Anda perlu mengetahui fitur-fitur yang terdapat pada Git, yaitu: 1. Distributed System Dengan sistem ini, Git memungkinkan pengguna untuk bekerja secara bersamaan pada project yang sama dari seluruh dunia, tanpa menggangu pekerjaan orang lain. 2. Branching Dengan Git, maka membuat, menghapus atau menggabungkan branch akan lebih cepat, lancar dan tidak memakan banyak waktu. Hal ini juga memungkinkan para developer memiliki branch code yang independent dan massive. 3. Open-source Git merupakan open-source karena memberikan fleksibilitas untuk memodifikasi kode sumbernya sesuai dengan kebutuhan pengguna atau kebutuhan dari developer. Selain itu, memungkinkan banyak orang untuk bekerja pada proyek yang sama dan bekerja sama satu sama lain dengan sangat efisien. Hal ii dirancang sedemikian rupa sehingga dapat menangani proyek-proyek kecil dan besar dengan mudah. 4. Version Control System yang terdistribusi Git menggunakan pendekatan yang disebut peer-to-peer yang berbeda dengan metode lain seperti subversion atau SVN yang menggunakan model client-server 5. Non-linear development Git memungkinkan pengguna dari seluruh dunia untuk melakukan operasi pada project dari jarak jauh. Seorang pengguna dapat mengambil bagian mana pun dari proyek dan melakukan operasi yang diperlukan dan kemudian memperbarui project lebih lanjut. Hal ini dapat dilakukan dengan non-linear development. 6. Penyimpanan media berada pada folder .git Hal ini tentu berbeda dengan VCS lain contohnya seperti SVN atau CVS. Karena metadata file yang sudah disimpan dalam sebuah folder tersembunyi. Contohnya seperti .cvs, .svn, .etc. 7. Lightweight Git menyimpan semua data dari repository pusat ke repository local saat cloning selesai. Hal ini memungkinkan ada ratusan pengguna yang mengerjakan proyek yang sama dan karenanya data pada repository pusat akan sangat besar. Git memiliki fitur lossless compression data yang dapat mengompresi data menjadi sangat minim dan menyimpannya di repository local. 8. Staging Area atau Index Git memiliki staging area, dengan begitu developer akan dapat memformat commit atau bisa juga membuatnya agar dapat di-review sebelum akhirnya diterapkan secara benar. Manfaat Git \u00b6 1. Memudahkan dalam berkolaborasi dalam satu atau lebih project Dengan Git, akan sangat memudahkan para developer untuk berpartisipasi dalam sebuah pengembangan project yang dilakukan oleh orang-orang. 2. Memudahkan programmer untuk mengetahui perubahan source codenya Anda tidak perlu membuat file baru yang jumlahnya banyak dengan nama yang berbeda karena dengan Git programmer dapat medeteksi secara langsung perubahan yang ada. Terdapat istilah commit pada Git yang berfungsi untuk menyimpan riwayat perubahan data pada file. Melalui commit, developer dapat kembali ke source code sebelumnya dengan istilah checkout. Selain itu, Git menyimpan seluruh versi source code. 3. Dapat disimpan dengan offline ataupun online Untuk mengoperasikan Git, Anda perlu menginstall software terlebih dahulu sehingga pekerjaan ini dapat dilakukan secara offline (tidak terkoneksi internet). Software ini juga tersedia secara gratis melalui web unduhan resminya di Git Downloading. Kesimpulan \u00b6 Setelah mengetahui apa itu Git, fungsi, dan manfaatnya. Dapat diketahui juga Git merupakan version control system paling populer digunakan saat ini, terdapat ratusan proyek software yang mengandalkan Git, sehingga dapat dikatakan Git adalah sebuah tools yang diperlukan oleh para developer atau programmer.","title":"Git V1"},{"location":"belajar/git/#belajar-git","text":"Note sumber panduan ini dari https://git-scm.com/book/id/v2/","title":"Belajar Git"},{"location":"belajar/git/#apa-itu-git","text":"Saat ini, ada banyak tools yang digunakan oleh programmer dan developer. Salah satunya adalah Git yang menjadi tool penting dalam pengembangan sebuah website. Jangan keliru, Git bukan merupakan bahasa pemograman, tetapi sangat penting bagi programmer yang bekerja di hampir semua bahasa pemrograman. Untuk mengetahui apa itu Git, Anda perlu mengetahui fungsi Git yaitu sebagai control system untuk menjalankan proyek pengembangan software. Git merupakan tool yang dikembangkan oleh pengembang sistem kernel dari sistem operasi Linux yaitu Linus Torvalds pada tahun 2005. Berbasis pengontrol versi atau Version Control System (VCS), Git bertugas untuk mencatat perubahan seluruh file atau repository dari suatu project baik besar maupun kecil. Tujuan penggunaan Git untuk mengelola versi source code program dengan menentukan baris dan kode yang akan ditambah atau diganti. Ada ratusan proyek software yang mengandalkan Git sebagai version control system mereka, termasuk proyek komersial serta open source. Biasanya developer software menggunakan Git untuk distributed version control (VCS terdistribusi) yang bertujuan untuk menyimpan database tidak hanya ke satu tempat saja. Namun, semua orang yang terlibat dalam penyusunan kode dapat menyimpan database ini. Prosedur yang diterapkan ini dapat membantu antar divisi project untuk memantau dan menghubungkan (merge) antar ekstensi yang berbeda dengan mudah. Sehingga, aplikasi yang dibuat oleh sebuah tim project dapat berfungsi tanpa menghubungkan secara manual.","title":"Apa itu git?"},{"location":"belajar/git/#fitur-pada-git","text":"Anda perlu mengetahui fitur-fitur yang terdapat pada Git, yaitu: 1. Distributed System Dengan sistem ini, Git memungkinkan pengguna untuk bekerja secara bersamaan pada project yang sama dari seluruh dunia, tanpa menggangu pekerjaan orang lain. 2. Branching Dengan Git, maka membuat, menghapus atau menggabungkan branch akan lebih cepat, lancar dan tidak memakan banyak waktu. Hal ini juga memungkinkan para developer memiliki branch code yang independent dan massive. 3. Open-source Git merupakan open-source karena memberikan fleksibilitas untuk memodifikasi kode sumbernya sesuai dengan kebutuhan pengguna atau kebutuhan dari developer. Selain itu, memungkinkan banyak orang untuk bekerja pada proyek yang sama dan bekerja sama satu sama lain dengan sangat efisien. Hal ii dirancang sedemikian rupa sehingga dapat menangani proyek-proyek kecil dan besar dengan mudah. 4. Version Control System yang terdistribusi Git menggunakan pendekatan yang disebut peer-to-peer yang berbeda dengan metode lain seperti subversion atau SVN yang menggunakan model client-server 5. Non-linear development Git memungkinkan pengguna dari seluruh dunia untuk melakukan operasi pada project dari jarak jauh. Seorang pengguna dapat mengambil bagian mana pun dari proyek dan melakukan operasi yang diperlukan dan kemudian memperbarui project lebih lanjut. Hal ini dapat dilakukan dengan non-linear development. 6. Penyimpanan media berada pada folder .git Hal ini tentu berbeda dengan VCS lain contohnya seperti SVN atau CVS. Karena metadata file yang sudah disimpan dalam sebuah folder tersembunyi. Contohnya seperti .cvs, .svn, .etc. 7. Lightweight Git menyimpan semua data dari repository pusat ke repository local saat cloning selesai. Hal ini memungkinkan ada ratusan pengguna yang mengerjakan proyek yang sama dan karenanya data pada repository pusat akan sangat besar. Git memiliki fitur lossless compression data yang dapat mengompresi data menjadi sangat minim dan menyimpannya di repository local. 8. Staging Area atau Index Git memiliki staging area, dengan begitu developer akan dapat memformat commit atau bisa juga membuatnya agar dapat di-review sebelum akhirnya diterapkan secara benar.","title":"Fitur pada Git"},{"location":"belajar/git/#manfaat-git","text":"1. Memudahkan dalam berkolaborasi dalam satu atau lebih project Dengan Git, akan sangat memudahkan para developer untuk berpartisipasi dalam sebuah pengembangan project yang dilakukan oleh orang-orang. 2. Memudahkan programmer untuk mengetahui perubahan source codenya Anda tidak perlu membuat file baru yang jumlahnya banyak dengan nama yang berbeda karena dengan Git programmer dapat medeteksi secara langsung perubahan yang ada. Terdapat istilah commit pada Git yang berfungsi untuk menyimpan riwayat perubahan data pada file. Melalui commit, developer dapat kembali ke source code sebelumnya dengan istilah checkout. Selain itu, Git menyimpan seluruh versi source code. 3. Dapat disimpan dengan offline ataupun online Untuk mengoperasikan Git, Anda perlu menginstall software terlebih dahulu sehingga pekerjaan ini dapat dilakukan secara offline (tidak terkoneksi internet). Software ini juga tersedia secara gratis melalui web unduhan resminya di Git Downloading.","title":"Manfaat Git"},{"location":"belajar/git/#kesimpulan","text":"Setelah mengetahui apa itu Git, fungsi, dan manfaatnya. Dapat diketahui juga Git merupakan version control system paling populer digunakan saat ini, terdapat ratusan proyek software yang mengandalkan Git, sehingga dapat dikatakan Git adalah sebuah tools yang diperlukan oleh para developer atau programmer.","title":"Kesimpulan"},{"location":"belajar/git/bantuan/","text":"Mendapatkan Bantuan \u00b6 Jika Anda memerlukan bantuan ketika menggunakan Git, ada tiga cara untuk mendapatkan halaman petunjuk bantuan ( manual page atau manpage) untuk sebarang perintah Git: git help <verb> git <verb> --help man git-<verb> Sebagai contoh, Anda dapat mendapatkan bantuan untuk perintah config dengan menjalankan git help config Perintah-perintah tersebut bagus, karena Anda dapat mendapatkannya di mana saja, bahkan ketika luring. Jika manpage dan buku ini tidak cukup dan Anda memerlukan bantuan secara langsung, Anda dapat mencoba kanal #git atau #github pada server Freenode IRC (irc.freenode.net.) Kanal-kanal tersebut diisi oleh ratusan orang yang sangat memahami tentang Git secara rutin dan seringkali bersedia untuk membantu.","title":"Bantuan"},{"location":"belajar/git/bantuan/#mendapatkan-bantuan","text":"Jika Anda memerlukan bantuan ketika menggunakan Git, ada tiga cara untuk mendapatkan halaman petunjuk bantuan ( manual page atau manpage) untuk sebarang perintah Git: git help <verb> git <verb> --help man git-<verb> Sebagai contoh, Anda dapat mendapatkan bantuan untuk perintah config dengan menjalankan git help config Perintah-perintah tersebut bagus, karena Anda dapat mendapatkannya di mana saja, bahkan ketika luring. Jika manpage dan buku ini tidak cukup dan Anda memerlukan bantuan secara langsung, Anda dapat mencoba kanal #git atau #github pada server Freenode IRC (irc.freenode.net.) Kanal-kanal tersebut diisi oleh ratusan orang yang sangat memahami tentang Git secara rutin dan seringkali bersedia untuk membantu.","title":"Mendapatkan Bantuan"},{"location":"belajar/git/command-line/","text":"Command Line \u00b6 Ada banyak cara untuk menggunakan Git. Ada peralatan command line asli, dan ada banyak antarmuka grafis pengguna dari berbagai kemampuan. Untuk buku ini, kita akan menggunakan Git dengan command line . Sebagai contoh, command line adalah satu-satunya cara agar Anda dapat menjalankan semua perintah-perintah Git \u2013 kebanyakan GUI hanya menerapkan beberapa subset dari kegunaan Git agar lebih mudah. Jika Anda tahu bagaimana cara menjalankan versi command line , mungkin Anda juga menemukan bagaimana cara menjalankan versi GUI , meski kebalikannya belum tentu benar. Juga, ketika pilihan klien grafis Anda adalah masalah kesenangan pribadi, semua pengguna akan memiliki peralatan command line terpasang dan tersedia. Jadi, kami akan mengharap Anda untuk tahu bagaimana cara membuka Terminal di Mac atau Command Prompt atau Powershell di Windows. Jika Anda tidak tahu tentang apa yang sedang kita bicarakan di sini, mungkin Anda perlu berhenti dan mempelajari hal itu secepatnya sehingga Anda dapat mengikuti semua contoh-contoh dan penjelasan pada buku ini.","title":"Command Line"},{"location":"belajar/git/command-line/#command-line","text":"Ada banyak cara untuk menggunakan Git. Ada peralatan command line asli, dan ada banyak antarmuka grafis pengguna dari berbagai kemampuan. Untuk buku ini, kita akan menggunakan Git dengan command line . Sebagai contoh, command line adalah satu-satunya cara agar Anda dapat menjalankan semua perintah-perintah Git \u2013 kebanyakan GUI hanya menerapkan beberapa subset dari kegunaan Git agar lebih mudah. Jika Anda tahu bagaimana cara menjalankan versi command line , mungkin Anda juga menemukan bagaimana cara menjalankan versi GUI , meski kebalikannya belum tentu benar. Juga, ketika pilihan klien grafis Anda adalah masalah kesenangan pribadi, semua pengguna akan memiliki peralatan command line terpasang dan tersedia. Jadi, kami akan mengharap Anda untuk tahu bagaimana cara membuka Terminal di Mac atau Command Prompt atau Powershell di Windows. Jika Anda tidak tahu tentang apa yang sedang kita bicarakan di sini, mungkin Anda perlu berhenti dan mempelajari hal itu secepatnya sehingga Anda dapat mengikuti semua contoh-contoh dan penjelasan pada buku ini.","title":"Command Line"},{"location":"belajar/git/dasar-git/","text":"Dasar-dasar Git \u00b6 Jadi, mudahnya, apakah Git itu? Ini adalah bab yang penting untuk dipahami, karena jika Anda memahami apa itu Git dan pemahaman dasar tentang bagaimana Git bekerja, maka, menggunakan Git dengan efektif mungkin akan menjadi lebih mudah Anda lakukan. Selama Anda belajar Git, cobalah untuk menjernihkan pikiran Anda dari hal-hal yang Anda ketahui tentang VCS lainnya, seperti Subversion dan Perforce; dengan begitu, akan membantu Anda menghindari hal-hal yang membingungkan ketika menggunakan alatnya. Git menyimpan dan berpikir tentang informasi dengan sangat berbeda daripada sistem lainnya, meskipun antarmuka penggunanya cukup mirip, dan memahami perbedaan-perbedaan tersebut akan membantu mencegah Anda menjadi bingung ketika menggunakannya. Snapshots, Bukan Perbedaan-perbedaan \u00b6 Perbedaan besar antara Git dan VCS lainnya (Subversion dan sejenisnya) adalah tentang cara Git berpikir tentang datanya. Secara konsep, kebanyakan sistem lain menyimpan informasi sebagai sebuah daftar dari perubahan-perubahan berbasis berkas. Sistem-sistem tersebut (CVS, Subversion, Perforce, Bazaar, dan seterusnya) berpikir tentang informasi yang mereka simpan sebagai sekumpulan berkas dan perubahan-perubahan yang dibuat kepada tiap berkas sepanjang waktu. graph LR A(Versi 1) --- A1(Versi 2) --- A2(Versi 3) --- A3(Versi 4) --- A4(Versi 5) B(File A) --> B1(#1) ---> B2(#2) C(File B) ----> C1(#1) --> C2(#2) D(File C) --> D1(#1) --> D2(#2) ---> D3(#3) Git tidak berpikir atau menyimpan datanya dengan cara ini. Namun, Git berpikir tentang datanya lebih seperti sekumpulan snapshot dari sebuah miniatur filesystem . Setiap kali Anda melakukan commit , atau menyimpan keadaan dari proyek Anda di Git, pada dasarnya itu mengambil sebuah gambar tentang bagaimana tampilan semua berkas Anda pada saat itu dan menyimpan acuan kepada snapshot tersebut. Singkatnya, jika berkas-berkas itu tidak berubah, Git tidak menyimpan berkasnya lagi, hanya menautkan ke berkas yang sama persis sebelumnya yang telah tersimpan. Git berpikir tentang datanya lebih seperti sebuah aliran snapshot . graph TD A(Versi 1) --- A1(File A) --- A2(File B) --- A3(File C) B(Versi 2) --- B1(A1) --- B2(B) --- B3(C1) C(Versi 3) --- C1(A1) --- C2(B) --- C3(C2) D(Versi 4) --- D1(A2) --- D2(B1) --- D3(C2) E(Versi 5) --- E1(A2) --- E2(B2) --- E3(C3) style B2 stroke-width:2px,stroke-dasharray: 5 5 style C1 stroke-width:2px,stroke-dasharray: 5 5 style C2 stroke-width:2px,stroke-dasharray: 5 5 style D3 stroke-width:2px,stroke-dasharray: 5 5 style E1 stroke-width:2px,stroke-dasharray: 5 5 Ini adalah perbedaan penting antara Git dan hampir semua VCS lainnya. Hal itu membuat Git mempertimbangkan ulang hampir semua aspek dari version control yang kebanyakan sistem lainnya tiru dari generasi sebelumnya. Ini membuat Git lebih seperti sebuah filesystem kecil dengan beberapa alat yang sangat hebat terpasang padanya, daripada hanya sebuah VCS sederhana. Kita akan menjelajahi beberapa keuntungan yang Anda dapatkan dengan berpikir tentang data Anda seperti ini ketika kami membahas percabangan Git pada Git Branching Hampir Setiap Pekerjaan Adalah Lokal \u00b6 Kebanyakan pekerjaan pada Git hanya membutuhkan berkas-berkas dan sumber daya lokal untuk bekerja \u2013 secara umum, tidak ada informasi yang dibutuhkan dari komputer lain dalam jaringan Anda. Jika Anda terbiasa dengan CVCS di mana kebanyakan pekerjaan memiliki kelebihan network latency , aspek ini dalam Git akan membuat Anda berpikir bahwa Tuhan telah memberkati Git dengan kekuatan yang tak dapat diungkapkan dengan kata-kata. Karena, jika Anda memiliki seluruh riwayat proyek tepat berada di dalam local disk Anda, kebanyakan pekerjaan terlihat hampir dalam sekejap. Sebagai contoh, untuk meramban riwayat dari proyek, Git tidak perlu pergi ke server untuk mendapatkan riwayat dan menampilkannya kepada Anda \u2013 dia hanya membacanya langsung dari basis data lokal Anda. Ini berarti Anda melihat riwayat proyek hampir dalam sekejap. Jika Anda ingin melihat perubahan-perubahan yang dikenalkan antara versi sekarang dari sebuah berkas dan berkasnya pada saat sebulan yang lalu, Git dapat mencari berkasnya sebulan yang lalu dan melakukan perhitungan perbedaan secara lokal, bukannya meminta kepada remote server untuk melakukannya atau menarik versi lama dari berkas dari remote server untuk melakukannya secara lokal. Ini juga berarti bahwa hanya ada sedikit hal yang tidak dapat Anda lakukan ketika Anda berada di luar jaringan atau di luar VPN. Jika Anda sedang mengendarai pesawat terbang atau kereta dan ingin sedikit bekerja, Anda dapat melakukan commit dengan bahagia hingga Anda mendapat sambungan jaringan untuk mengunggah. Jika Anda pulang dan tidak dapat menggunakan klien VPN dengan wajar, Anda masih dapat bekerja. Pada banyak sistem lain, melakukan hal tersebut adalah tidak mungkin atau sangat susah. Pada Perforce, misalnya, Anda tidak dapat melakukan banyak hal ketika Anda tidak tersambung ke server ; dan pada Subversion dan CVS, Anda dapat menyunting berkas, namun Anda tidak dapat melakukan commit tentang perubahan-perubahan ke basis data Anda (karena basis data Anda sedang luring). Ini mungkin tidak terlihat seperti sebuah masalah, namun, Anda mungkin akan terkejut betapa besar perbedaan yang dapat dibuatnya. Git Memiliki Integritas \u00b6 Semuanya dalam Git telah dilakukan checksum sebelum itu disimpan dan kemudian mengacu pada checksum tersebut. Ini berarti bahwa tidak mungkin untuk mengubah isi dari sebarang berkas atau direktori tanpa diketahui oleh Git. Kemampuan ini terpasang pada Git pada tingkat paling bawah dan terpadu pada filosofinya. Anda tidak dapat kehilangan informasi dalam singgahan atau mendapat berkas yang corrupt yang tidak terlacak oleh Git. Cara kerja yang digunakan oleh Git untuk melakukan checksum disebut dengan SHA-1 hash . Ini adalah kumpulan kata sepanjang 40 karakter dari karakter heksadesimal (0-9 dan a-f) dan dihitung berdasarkan isi dari sebuah berkas atau struktur direktori dalam Git. Sebuah SHA-1 hash nampak seperti berikut: Contoh hash 24b9da6552252987aa493b52f8696cd6d3b00373 Anda akan melihat nilai hash tersebut di semua tempat pada Git karena dia sering menggunakannya. Nyatanya, Git menyimpan semuanya dalam basis datanya bukan dari nama berkas, namun dari nilai hash isinya. Git Umumnya Hanya Menambah Data \u00b6 Ketika Anda melakukan aksi dalam Git, hampir semuanya hanya menambahkan data ke basis data Git. Adalah sulit untuk membuat sistem melakukan apapun yang tidak dapat dikembalikan atau membuatnya menghapus data dalam berbagai cara. Seperti pada VCS lain, Anda dapat kehilangan atau mengacak-acak perubahan yang belum Anda commit ; namun, setelah Anda melakukan commit snapshot ke Git, akan sangat sulit untuk kehilangan, terutama jika Anda menyimpan ke basis data Anda ke repository lain secara rutin. Ini membuat menggunakan Git adalah sebuah kebahagiaan, karena kita tahu kita dapat melakukan uji coba tanpa bahaya dari mengacak-acak hal-hal. Untuk melihat lebih dalam tentang bagaimana Git menyimpan datanya dan bagaimana Anda dapat memulihkan data yang kelihatannya hilang, lihat Tiga Keadaan \u00b6 Sekarang, perhatikan. Ini adalah hal utama untuk diingat tentang Git jika Anda ingin sisa perjalanan belajar Anda berjalan dengan lancar. Git memiliki tiga keadaan utama yang berkas-berkas Anda dapat masuk ke dalamnya: committed , modified , dan staged . Committed berarti datanya telah tersimpan dengan aman pada basis data lokal Anda. Modified berarti Anda telah mengubah berkas, namun belum di- commit ke basis data Anda. Staged berarti Anda telah menandai berkas yang telah diubah ke dalam versi sekarang untuk snapshot commit Anda selanjutnya. Ini memimpin kita kepada tiga bab utama dalam proyek Git: direktori Git, working directory , dan staging area . sequenceDiagram Direktori Kerja-->Staging Area: note over Repository: .git folder/directory Repository-)Direktori Kerja: Checkout Note over Repository,Direktori Kerja: mengubah berkas dalam working directory Anda. Direktori Kerja-)Staging Area: Stage files Note over Direktori Kerja,Staging Area: menyiapkan berkasnya. Staging Area-)Repository: Commit Note over Repository,Staging Area: mengambil berkas-berkas Directory Git adalah di mana Git menyimpan metadata dan basis data obyek untuk proyek Anda. Ini adalah bagian paling penting tentang Git, dan ini adalah apa yang disalin ketika Anda menggandakan sebuah repository dari komputer lain. Working directory adalah sebuah checkout tunggal dari satu versi milik proyek. Berkas-berkas ini ditarik dari basis data yang telah dimampatkan dalam direktori Git dan ditempatkan pada diska untuk Anda gunakan atau sunting. Staging area adalah sebuah berkas, umumnya berada pada direktori Git Anda, yang menyimpan informasi tentang apa yang akan menjadi commit Anda selanjutnya. Terkadang disebut juga sebagai index, namun juga sering disebut sebagai staging area Alur kerja dasar Git adalah seperti berikut: Anda mengubah berkas dalam working directory Anda. Anda menyiapkan berkasnya, menambah snapshot darinya ke staging area Anda. Anda melakukan commit , yang mengambil berkas-berkas yang ada pada staging area dan menyimpan snapshot tersebut secara tetap ke dalam direktori Git Anda. Jika sebuah versi tertentu dari sebuah berkas ada pada direktori Git, itu dianggap telah committed . Jika itu diubah, namun telah ditambahkan ke staging area , maka itu staged . Dan jika itu telah diubah sejak setelah di- check out , namun belum staged , maka itu adalah modified . Dalam [bab_dasar-dasar_git], Anda akan belajar lebih banyak tentang keadaan tersebut dan bagaimana Anda dapat memanfaatkannya atau melewati semua ke bagian staged .","title":"Dasar-dasar Git"},{"location":"belajar/git/dasar-git/#dasar-dasar-git","text":"Jadi, mudahnya, apakah Git itu? Ini adalah bab yang penting untuk dipahami, karena jika Anda memahami apa itu Git dan pemahaman dasar tentang bagaimana Git bekerja, maka, menggunakan Git dengan efektif mungkin akan menjadi lebih mudah Anda lakukan. Selama Anda belajar Git, cobalah untuk menjernihkan pikiran Anda dari hal-hal yang Anda ketahui tentang VCS lainnya, seperti Subversion dan Perforce; dengan begitu, akan membantu Anda menghindari hal-hal yang membingungkan ketika menggunakan alatnya. Git menyimpan dan berpikir tentang informasi dengan sangat berbeda daripada sistem lainnya, meskipun antarmuka penggunanya cukup mirip, dan memahami perbedaan-perbedaan tersebut akan membantu mencegah Anda menjadi bingung ketika menggunakannya.","title":"Dasar-dasar Git"},{"location":"belajar/git/dasar-git/#snapshots-bukan-perbedaan-perbedaan","text":"Perbedaan besar antara Git dan VCS lainnya (Subversion dan sejenisnya) adalah tentang cara Git berpikir tentang datanya. Secara konsep, kebanyakan sistem lain menyimpan informasi sebagai sebuah daftar dari perubahan-perubahan berbasis berkas. Sistem-sistem tersebut (CVS, Subversion, Perforce, Bazaar, dan seterusnya) berpikir tentang informasi yang mereka simpan sebagai sekumpulan berkas dan perubahan-perubahan yang dibuat kepada tiap berkas sepanjang waktu. graph LR A(Versi 1) --- A1(Versi 2) --- A2(Versi 3) --- A3(Versi 4) --- A4(Versi 5) B(File A) --> B1(#1) ---> B2(#2) C(File B) ----> C1(#1) --> C2(#2) D(File C) --> D1(#1) --> D2(#2) ---> D3(#3) Git tidak berpikir atau menyimpan datanya dengan cara ini. Namun, Git berpikir tentang datanya lebih seperti sekumpulan snapshot dari sebuah miniatur filesystem . Setiap kali Anda melakukan commit , atau menyimpan keadaan dari proyek Anda di Git, pada dasarnya itu mengambil sebuah gambar tentang bagaimana tampilan semua berkas Anda pada saat itu dan menyimpan acuan kepada snapshot tersebut. Singkatnya, jika berkas-berkas itu tidak berubah, Git tidak menyimpan berkasnya lagi, hanya menautkan ke berkas yang sama persis sebelumnya yang telah tersimpan. Git berpikir tentang datanya lebih seperti sebuah aliran snapshot . graph TD A(Versi 1) --- A1(File A) --- A2(File B) --- A3(File C) B(Versi 2) --- B1(A1) --- B2(B) --- B3(C1) C(Versi 3) --- C1(A1) --- C2(B) --- C3(C2) D(Versi 4) --- D1(A2) --- D2(B1) --- D3(C2) E(Versi 5) --- E1(A2) --- E2(B2) --- E3(C3) style B2 stroke-width:2px,stroke-dasharray: 5 5 style C1 stroke-width:2px,stroke-dasharray: 5 5 style C2 stroke-width:2px,stroke-dasharray: 5 5 style D3 stroke-width:2px,stroke-dasharray: 5 5 style E1 stroke-width:2px,stroke-dasharray: 5 5 Ini adalah perbedaan penting antara Git dan hampir semua VCS lainnya. Hal itu membuat Git mempertimbangkan ulang hampir semua aspek dari version control yang kebanyakan sistem lainnya tiru dari generasi sebelumnya. Ini membuat Git lebih seperti sebuah filesystem kecil dengan beberapa alat yang sangat hebat terpasang padanya, daripada hanya sebuah VCS sederhana. Kita akan menjelajahi beberapa keuntungan yang Anda dapatkan dengan berpikir tentang data Anda seperti ini ketika kami membahas percabangan Git pada Git Branching","title":"Snapshots, Bukan Perbedaan-perbedaan"},{"location":"belajar/git/dasar-git/#hampir-setiap-pekerjaan-adalah-lokal","text":"Kebanyakan pekerjaan pada Git hanya membutuhkan berkas-berkas dan sumber daya lokal untuk bekerja \u2013 secara umum, tidak ada informasi yang dibutuhkan dari komputer lain dalam jaringan Anda. Jika Anda terbiasa dengan CVCS di mana kebanyakan pekerjaan memiliki kelebihan network latency , aspek ini dalam Git akan membuat Anda berpikir bahwa Tuhan telah memberkati Git dengan kekuatan yang tak dapat diungkapkan dengan kata-kata. Karena, jika Anda memiliki seluruh riwayat proyek tepat berada di dalam local disk Anda, kebanyakan pekerjaan terlihat hampir dalam sekejap. Sebagai contoh, untuk meramban riwayat dari proyek, Git tidak perlu pergi ke server untuk mendapatkan riwayat dan menampilkannya kepada Anda \u2013 dia hanya membacanya langsung dari basis data lokal Anda. Ini berarti Anda melihat riwayat proyek hampir dalam sekejap. Jika Anda ingin melihat perubahan-perubahan yang dikenalkan antara versi sekarang dari sebuah berkas dan berkasnya pada saat sebulan yang lalu, Git dapat mencari berkasnya sebulan yang lalu dan melakukan perhitungan perbedaan secara lokal, bukannya meminta kepada remote server untuk melakukannya atau menarik versi lama dari berkas dari remote server untuk melakukannya secara lokal. Ini juga berarti bahwa hanya ada sedikit hal yang tidak dapat Anda lakukan ketika Anda berada di luar jaringan atau di luar VPN. Jika Anda sedang mengendarai pesawat terbang atau kereta dan ingin sedikit bekerja, Anda dapat melakukan commit dengan bahagia hingga Anda mendapat sambungan jaringan untuk mengunggah. Jika Anda pulang dan tidak dapat menggunakan klien VPN dengan wajar, Anda masih dapat bekerja. Pada banyak sistem lain, melakukan hal tersebut adalah tidak mungkin atau sangat susah. Pada Perforce, misalnya, Anda tidak dapat melakukan banyak hal ketika Anda tidak tersambung ke server ; dan pada Subversion dan CVS, Anda dapat menyunting berkas, namun Anda tidak dapat melakukan commit tentang perubahan-perubahan ke basis data Anda (karena basis data Anda sedang luring). Ini mungkin tidak terlihat seperti sebuah masalah, namun, Anda mungkin akan terkejut betapa besar perbedaan yang dapat dibuatnya.","title":"Hampir Setiap Pekerjaan Adalah Lokal"},{"location":"belajar/git/dasar-git/#git-memiliki-integritas","text":"Semuanya dalam Git telah dilakukan checksum sebelum itu disimpan dan kemudian mengacu pada checksum tersebut. Ini berarti bahwa tidak mungkin untuk mengubah isi dari sebarang berkas atau direktori tanpa diketahui oleh Git. Kemampuan ini terpasang pada Git pada tingkat paling bawah dan terpadu pada filosofinya. Anda tidak dapat kehilangan informasi dalam singgahan atau mendapat berkas yang corrupt yang tidak terlacak oleh Git. Cara kerja yang digunakan oleh Git untuk melakukan checksum disebut dengan SHA-1 hash . Ini adalah kumpulan kata sepanjang 40 karakter dari karakter heksadesimal (0-9 dan a-f) dan dihitung berdasarkan isi dari sebuah berkas atau struktur direktori dalam Git. Sebuah SHA-1 hash nampak seperti berikut: Contoh hash 24b9da6552252987aa493b52f8696cd6d3b00373 Anda akan melihat nilai hash tersebut di semua tempat pada Git karena dia sering menggunakannya. Nyatanya, Git menyimpan semuanya dalam basis datanya bukan dari nama berkas, namun dari nilai hash isinya.","title":"Git Memiliki Integritas"},{"location":"belajar/git/dasar-git/#git-umumnya-hanya-menambah-data","text":"Ketika Anda melakukan aksi dalam Git, hampir semuanya hanya menambahkan data ke basis data Git. Adalah sulit untuk membuat sistem melakukan apapun yang tidak dapat dikembalikan atau membuatnya menghapus data dalam berbagai cara. Seperti pada VCS lain, Anda dapat kehilangan atau mengacak-acak perubahan yang belum Anda commit ; namun, setelah Anda melakukan commit snapshot ke Git, akan sangat sulit untuk kehilangan, terutama jika Anda menyimpan ke basis data Anda ke repository lain secara rutin. Ini membuat menggunakan Git adalah sebuah kebahagiaan, karena kita tahu kita dapat melakukan uji coba tanpa bahaya dari mengacak-acak hal-hal. Untuk melihat lebih dalam tentang bagaimana Git menyimpan datanya dan bagaimana Anda dapat memulihkan data yang kelihatannya hilang, lihat","title":"Git Umumnya Hanya Menambah Data"},{"location":"belajar/git/dasar-git/#tiga-keadaan","text":"Sekarang, perhatikan. Ini adalah hal utama untuk diingat tentang Git jika Anda ingin sisa perjalanan belajar Anda berjalan dengan lancar. Git memiliki tiga keadaan utama yang berkas-berkas Anda dapat masuk ke dalamnya: committed , modified , dan staged . Committed berarti datanya telah tersimpan dengan aman pada basis data lokal Anda. Modified berarti Anda telah mengubah berkas, namun belum di- commit ke basis data Anda. Staged berarti Anda telah menandai berkas yang telah diubah ke dalam versi sekarang untuk snapshot commit Anda selanjutnya. Ini memimpin kita kepada tiga bab utama dalam proyek Git: direktori Git, working directory , dan staging area . sequenceDiagram Direktori Kerja-->Staging Area: note over Repository: .git folder/directory Repository-)Direktori Kerja: Checkout Note over Repository,Direktori Kerja: mengubah berkas dalam working directory Anda. Direktori Kerja-)Staging Area: Stage files Note over Direktori Kerja,Staging Area: menyiapkan berkasnya. Staging Area-)Repository: Commit Note over Repository,Staging Area: mengambil berkas-berkas Directory Git adalah di mana Git menyimpan metadata dan basis data obyek untuk proyek Anda. Ini adalah bagian paling penting tentang Git, dan ini adalah apa yang disalin ketika Anda menggandakan sebuah repository dari komputer lain. Working directory adalah sebuah checkout tunggal dari satu versi milik proyek. Berkas-berkas ini ditarik dari basis data yang telah dimampatkan dalam direktori Git dan ditempatkan pada diska untuk Anda gunakan atau sunting. Staging area adalah sebuah berkas, umumnya berada pada direktori Git Anda, yang menyimpan informasi tentang apa yang akan menjadi commit Anda selanjutnya. Terkadang disebut juga sebagai index, namun juga sering disebut sebagai staging area Alur kerja dasar Git adalah seperti berikut: Anda mengubah berkas dalam working directory Anda. Anda menyiapkan berkasnya, menambah snapshot darinya ke staging area Anda. Anda melakukan commit , yang mengambil berkas-berkas yang ada pada staging area dan menyimpan snapshot tersebut secara tetap ke dalam direktori Git Anda. Jika sebuah versi tertentu dari sebuah berkas ada pada direktori Git, itu dianggap telah committed . Jika itu diubah, namun telah ditambahkan ke staging area , maka itu staged . Dan jika itu telah diubah sejak setelah di- check out , namun belum staged , maka itu adalah modified . Dalam [bab_dasar-dasar_git], Anda akan belajar lebih banyak tentang keadaan tersebut dan bagaimana Anda dapat memanfaatkannya atau melewati semua ke bagian staged .","title":"Tiga Keadaan"},{"location":"belajar/git/install-git/","text":"Install Git \u00b6 Sebelum Anda mulai menggunakan Git, Anda harus membuatnya tersedia pada komputer Anda. Meskipun sudah terpasang, adalah gagasan yang baik untuk memperbarui ke versi terakhir. Anda dapat memasangnya sebagai package atau melalui pemasang lainnya, atau mengunduh sumber kodenya dan meng- compile -nya sendiri. Note Buku ini ditulis menggunakan Git versi 2.0.0 . Meski begitu, kebanyakan perintah yang kita gunakan seharusnya dapat bekerja meskipun pada versi Git yang sebelumnya, beberapa dari itu mungkin tidak bekerja atau bekerja dengan sedikit berbeda jika Anda menggunakan versi yang sebelumnya. Karena Git sangat baik dalam mempertahankan kesesuaian dengan versi sebelumnya, sebarang versi setelah 2.0 seharusnya dapat bekerja dengan baik. Install Di linux \u00b6 Hal ini paling mudah untuk menginstal Git di Linux menggunakan pilihan paket manajer distribusi Linux anda. Jika anda lebih memilih untuk membangun dari sumber, anda dapat menemukan tarball di kernel.org. Versi terbaru adalah 2.37.3 . Debian/Ubuntu Fedora Gentoo Arch Linux openSUSE Mageia Nix/NixOS FreeBSD Solaris 9/10/11 (OpenCSW) Solaris 11 Express OpenBSD Alpine Slitaz Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, dll. Untuk versi stabil terbaru untuk rilis Debian/Ubuntu apt-get install git Untuk Ubuntu, PPA ini menyediakan versi stabil terbaru dari upstream Git add-apt-repository ppa:git-core/ppa # apt update; apt install git yum install git (up to Fedora 21) dnf install git (Fedora 22 and later) emerge --ask --verbose dev-vcs/git pacman -S git zypper install git urpmi git nix-env -i git pkg install git pkgutil -i git pkg install developer/versioning/git pkg_add git apk add git tazpkg add git RHEL dan turunannya biasanya menggunakan paket versi git. Anda dapat men-download tarball dan membangun dari sumber, atau gunakan pihak ke-3 repositori seperti IUS Proyek Komunitas untuk mendapatkan versi yang lebih baru dari git Install di Mac \u00b6 Ada beberapa opsi untuk menginstal Git di macOS. Perhatikan bahwa setiap distribusi non-sumber disediakan oleh pihak ketiga, dan dapat tidak up to date dengan rilis sumber terbaru. Homebrew MacPorts XCode Install Binary Membangun dari sumber Install git-gui Install homebrew Jika belum memilikinya, lalu: brew install git Install MacPorts jika belum memilikinya, lalu: sudo port install git Apple membuat paket biner Git dengan Xcode . Tim Harper menyediakan skript instalasi untuk Git. Versi terbaru adalah 2.33.0 , yang dirilis sekitar 1 tahun yang lalu, pada 2021-08-30. Jika Anda lebih suka membangun dari sumber, Anda dapat menemukan tarball di kernel.org . Versi terbaru adalah 2.37.3 . Jika Anda ingin menginstal git-gui dan gitk , git's commit GUI dan browser riwayat interaktif, Anda dapat melakukannya menggunakan homebrew brew install git-gui Anda juga dapat memasangnya sebagai bagian dari pemasangan GitHub untuk Mac. GUI untuk Git mereka memiliki pilihan untuk memasang peralatan command line juga. Anda dapat mengunduh alatnya dari situs web GitHub untuk Mac, pada http://mac.github.com . Installl di Windows \u00b6 Juga ada beberapa cara untuk memasang Git pada Windows. Bentuk resminya dapat diunduh pada situs web Git. Pergi ke http://git-scm.com/download/win dan unduhannya akan berjalan secara otomatis. Catat bahwa ini adalah proyek yang bernama Git untuk Windows (juga disebut dengan msysGit), yang terpisah dari Git itu sendiri; untuk informasi lebih lanjut, pergi ke http://msysgit.github.io/ . Cara mudah lainnya untuk memasang Git adalah dengan memasang GitHub untuk Windows. Pemasangnya menyertakan versi command line dari Git dan juga GUI-nya. Itu juga bekerja dengan baik pada Powershell, dan mengatur credential caching dengan solid dan pengaturan sane CRLF . Kita akan belajar lebih tentang hal-hal tersebut sebentar lagi, namun bisa dikatakan ini adalah yang Anda inginkan. Anda dapat mengunduh ini dari situs web GitHub untuk Windows, pada http://windows.github.com . Install dari sumber \u00b6 Beberapa orang mungkin merasa memasang Git dari sumbernya adalah hal yang berguna, karena Anda akan mendapatkan versi yang paling mutakhir. Pemasang biner cenderung tertinggal, meski Git telah berkembang dalam beberapa tahun terakhir, hal ini tidak membuat perbedaan yang berarti. Jika Anda ingin memasang Git dari sumbernya, Anda perlu memiliki library berikut yang Git bergantung padanya: curl , zlib , openssl , expat , dan libiconv . Sebagai contoh, jika Anda berada pada sistem yang memiliki yum (seperti Fedora) atau apt-get (seperti pada sistem berdasarkan Debian), Anda dapat menggunakan salah satu dari perintah-perintah berikut untuk memasang semua kebutuhannya: Fedora Debian/Ubuntu yum install curl-devel expat-devel gettext-devel \\ openssl-devel zlib-devel apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\ libz-dev libssl-dev Ketika Anda telah memiliki semua yang dibutuhkan, Anda dapat pergi dan mengambil keluaran tarball terbaru dari beberapa tempat. Anda dapat mengambilnya lewat situs Kernel.org, pada https://www.kernel.org/pub/software/scm/git , atau dari mirror milik situs GitHub, pada https://github.com/git/git/releases . Pada umumnya nampak jelas versi apa yang paling mutakhir pada halaman GitHub, namun pada halaman kernel.org juga memiliki release signature jika Anda ingin memeriksa unduhan Anda. Kemudian, compile dan pasang: 1 2 3 4 5 6 tar -zxf git-1.9.1.tar.gz cd git-1.9.1 make configure ./configure --prefix = /usr make all doc info sudo make install install-doc install-html install-info Setelah ini selesai, Anda juca dapat mengambil Git lewat Git itu sendiri untuk pembaruan: git clone git://git.kernel.org/pub/scm/git/git.git","title":"Instalasi Git"},{"location":"belajar/git/install-git/#install-git","text":"Sebelum Anda mulai menggunakan Git, Anda harus membuatnya tersedia pada komputer Anda. Meskipun sudah terpasang, adalah gagasan yang baik untuk memperbarui ke versi terakhir. Anda dapat memasangnya sebagai package atau melalui pemasang lainnya, atau mengunduh sumber kodenya dan meng- compile -nya sendiri. Note Buku ini ditulis menggunakan Git versi 2.0.0 . Meski begitu, kebanyakan perintah yang kita gunakan seharusnya dapat bekerja meskipun pada versi Git yang sebelumnya, beberapa dari itu mungkin tidak bekerja atau bekerja dengan sedikit berbeda jika Anda menggunakan versi yang sebelumnya. Karena Git sangat baik dalam mempertahankan kesesuaian dengan versi sebelumnya, sebarang versi setelah 2.0 seharusnya dapat bekerja dengan baik.","title":"Install Git"},{"location":"belajar/git/install-git/#install-di-linux","text":"Hal ini paling mudah untuk menginstal Git di Linux menggunakan pilihan paket manajer distribusi Linux anda. Jika anda lebih memilih untuk membangun dari sumber, anda dapat menemukan tarball di kernel.org. Versi terbaru adalah 2.37.3 . Debian/Ubuntu Fedora Gentoo Arch Linux openSUSE Mageia Nix/NixOS FreeBSD Solaris 9/10/11 (OpenCSW) Solaris 11 Express OpenBSD Alpine Slitaz Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, dll. Untuk versi stabil terbaru untuk rilis Debian/Ubuntu apt-get install git Untuk Ubuntu, PPA ini menyediakan versi stabil terbaru dari upstream Git add-apt-repository ppa:git-core/ppa # apt update; apt install git yum install git (up to Fedora 21) dnf install git (Fedora 22 and later) emerge --ask --verbose dev-vcs/git pacman -S git zypper install git urpmi git nix-env -i git pkg install git pkgutil -i git pkg install developer/versioning/git pkg_add git apk add git tazpkg add git RHEL dan turunannya biasanya menggunakan paket versi git. Anda dapat men-download tarball dan membangun dari sumber, atau gunakan pihak ke-3 repositori seperti IUS Proyek Komunitas untuk mendapatkan versi yang lebih baru dari git","title":"Install Di linux"},{"location":"belajar/git/install-git/#install-di-mac","text":"Ada beberapa opsi untuk menginstal Git di macOS. Perhatikan bahwa setiap distribusi non-sumber disediakan oleh pihak ketiga, dan dapat tidak up to date dengan rilis sumber terbaru. Homebrew MacPorts XCode Install Binary Membangun dari sumber Install git-gui Install homebrew Jika belum memilikinya, lalu: brew install git Install MacPorts jika belum memilikinya, lalu: sudo port install git Apple membuat paket biner Git dengan Xcode . Tim Harper menyediakan skript instalasi untuk Git. Versi terbaru adalah 2.33.0 , yang dirilis sekitar 1 tahun yang lalu, pada 2021-08-30. Jika Anda lebih suka membangun dari sumber, Anda dapat menemukan tarball di kernel.org . Versi terbaru adalah 2.37.3 . Jika Anda ingin menginstal git-gui dan gitk , git's commit GUI dan browser riwayat interaktif, Anda dapat melakukannya menggunakan homebrew brew install git-gui Anda juga dapat memasangnya sebagai bagian dari pemasangan GitHub untuk Mac. GUI untuk Git mereka memiliki pilihan untuk memasang peralatan command line juga. Anda dapat mengunduh alatnya dari situs web GitHub untuk Mac, pada http://mac.github.com .","title":"Install di Mac"},{"location":"belajar/git/install-git/#installl-di-windows","text":"Juga ada beberapa cara untuk memasang Git pada Windows. Bentuk resminya dapat diunduh pada situs web Git. Pergi ke http://git-scm.com/download/win dan unduhannya akan berjalan secara otomatis. Catat bahwa ini adalah proyek yang bernama Git untuk Windows (juga disebut dengan msysGit), yang terpisah dari Git itu sendiri; untuk informasi lebih lanjut, pergi ke http://msysgit.github.io/ . Cara mudah lainnya untuk memasang Git adalah dengan memasang GitHub untuk Windows. Pemasangnya menyertakan versi command line dari Git dan juga GUI-nya. Itu juga bekerja dengan baik pada Powershell, dan mengatur credential caching dengan solid dan pengaturan sane CRLF . Kita akan belajar lebih tentang hal-hal tersebut sebentar lagi, namun bisa dikatakan ini adalah yang Anda inginkan. Anda dapat mengunduh ini dari situs web GitHub untuk Windows, pada http://windows.github.com .","title":"Installl di Windows"},{"location":"belajar/git/install-git/#install-dari-sumber","text":"Beberapa orang mungkin merasa memasang Git dari sumbernya adalah hal yang berguna, karena Anda akan mendapatkan versi yang paling mutakhir. Pemasang biner cenderung tertinggal, meski Git telah berkembang dalam beberapa tahun terakhir, hal ini tidak membuat perbedaan yang berarti. Jika Anda ingin memasang Git dari sumbernya, Anda perlu memiliki library berikut yang Git bergantung padanya: curl , zlib , openssl , expat , dan libiconv . Sebagai contoh, jika Anda berada pada sistem yang memiliki yum (seperti Fedora) atau apt-get (seperti pada sistem berdasarkan Debian), Anda dapat menggunakan salah satu dari perintah-perintah berikut untuk memasang semua kebutuhannya: Fedora Debian/Ubuntu yum install curl-devel expat-devel gettext-devel \\ openssl-devel zlib-devel apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\ libz-dev libssl-dev Ketika Anda telah memiliki semua yang dibutuhkan, Anda dapat pergi dan mengambil keluaran tarball terbaru dari beberapa tempat. Anda dapat mengambilnya lewat situs Kernel.org, pada https://www.kernel.org/pub/software/scm/git , atau dari mirror milik situs GitHub, pada https://github.com/git/git/releases . Pada umumnya nampak jelas versi apa yang paling mutakhir pada halaman GitHub, namun pada halaman kernel.org juga memiliki release signature jika Anda ingin memeriksa unduhan Anda. Kemudian, compile dan pasang: 1 2 3 4 5 6 tar -zxf git-1.9.1.tar.gz cd git-1.9.1 make configure ./configure --prefix = /usr make all doc info sudo make install install-doc install-html install-info Setelah ini selesai, Anda juca dapat mengambil Git lewat Git itu sendiri untuk pembaruan: git clone git://git.kernel.org/pub/scm/git/git.git","title":"Install dari sumber"},{"location":"belajar/git/kesimpulan/","text":"Seharusnya Anda telah memiliki pemahaman dasar tentang apa itu Git dan bagaimana Git berbeda dari sistem version control yang terpusat yang mungkin telah Anda gunakan sebelumnya. Sekarang, seharusnya Anda juga telah memiliki sebuah versi dari Git yang mampu bekerja pada sistem Anda yang telah diatur dengan identitas pribadi Anda. Sekarang saatnya untuk belajar beberapa dasar dari Git.","title":"Kesimpulan"},{"location":"belajar/git/mengatur-git/","text":"Karena sekarang Anda telah memiliki Git pada sistem Anda, Anda mungkin ingin melakukan beberapa hal untuk mengatur lingkungan Git Anda. Sebaiknya Anda melakukan hal ini sekali pada setiap komputer yang diberikan; hal-hal ini akan tetap ada pada setiap peningkatan. Anda juga dapat mengubah pengaturan tersebut setiap saat dengan menjalankan kembali perintah-perintah tersebut. Git datang dengan sebuah alat bernama git config yang membolehkan Anda mendapatkan dan mengatur variabel-variabel pengaturan yang mengatur semua aspek tentang bagaimana Git tampak dan bekerja. Variabel-variabel tersebut dapat disimpan pada tiga tempat yang berbeda: Berkas /etc/gitconfig : Berisi nilai-nilai untuk setiap pengguna pada sistem dan semua repository mereka. Jika Anda memberikan pilihan --system kepada git config , dia membaca dan menulis dari berkas ini secara khusus. Berkas ~/.gitconfig atau ~/.config/git/config : Khusus untuk pengguna Anda. Anda dapat membuat Git membaca dan menulis ke berkas ini secara khusus dengan memberikan pilihan --global . Berkas config dalam direktori Git (yaitu, .git/config ) atau sebarang repository yang sedang Anda gunakan: Khusus untuk repository tunggal tersebut. Setiap tingkat menimpa nilai pada tingkat sebelumnya, jadi, nilai-nilai pada .git/config menimpa yang ada pada /etc/gitconfig . Pada sistem Windows, Git mencari berkas .gitconfig pada direktori $HOME ( C:\\Users\\$USER untuk kebanyakan orang). Git juga tetap mencari /etc/gitconfig , meskipun terhubung kepada MSys root , yang mana di manapun Anda memilih untuk memasang Git pada sistem Windows Anda ketika Anda menjalankan pemasang Git. Identitas \u00b6 Hal pertama yang sebaiknya Anda lakukan ketika memasang Git adalah menetapkan nama pengguna dan alamat surel. Ini penting, karena setiap commit pada Git menggunakan informasi ini, dan itu dituliskan dan tidak dapat diganti ke dalam commit yang Anda buat: Konfigurasi Nama git config --global user.name \"John Doe\" Konfigurasi Email git config --global user.email johndoe@example.com Sekali lagi, Anda hanya perlu melakukan ini sekali saja jika Anda memberikan pilihan --global , karena Git akan selalu menggunakan informasi tersebut untuk apapun yang Anda lakukan pada sistem tersebut. Jika Anda ingin menimpa ini dengan nama atau alamat surel yang berbeda untuk proyek tertentu, Anda dapat menjalankan perintah tanpa pilihan --global ketika Anda berada pada proyek tersebut. Banyak dari peralatan GUI akan membantu Anda melakukan hal ini ketika Anda menjalankannya pertama kali. Editor \u00b6 Sekarang, identitas Anda telah siap, Anda dapat mengatur editor teks bawaan yang akan digunakan ketika Git memerlukan Anda untuk menuliskan pesan/ Jika tidak diatur, Git menggunakan editor teks bawaan pada sistem Anda, yang pada umumnya adalah Vim. Jika Anda ingin menggunakan editor teks yang berbeda, seperti Emacs, Anda dapat melakukan hal berikut: git config --global core.editor emacs Note Vim dan Emacs adalah editor teks terkenal yang sering digunakan oleh para pengembang pada sistem berdasarkan Unix seperti Linux dan Mac. Jika Anda tidak terbiasa dengan kedua editor tersebut atau berada pada sistem Windows, Anda mungkin perlu mencari arahan tentang bagaimana cara mengatur editor kesukaan Anda dengan Git. Jika Anda tidak menetapkan editor seperti ini dan Anda tidak tahu apa itu Vim atau Emacs, Anda akan mendapatkan hal yang membingungkan ketika mereka diluncurkan. Cek Pengaturan \u00b6 Jika Anda ingin memeriksa pengaturan Anda, Anda dapat menggunakan perintah git config --list untuk mendaftar semua pengaturan yang dapat ditemukan Git pada saat itu: git config --list user.name = John Doe user.email = johndoe@example.com color.status = auto color.branch = auto color.interactive = auto color.diff = auto ... Anda mungkin melihat kunci-kunci lebih dari satu, karena Git membaca kunci yang sama dari berkas-berkas yang berbeda ( /etc/gitconfig dan ~/.gitconfig , contohnya). Dalam hal ini, Git menggunakan nilai terakhit dari setiap kunci unik yang dia lihat. Anda juga dapat memeriksa apa yang Git pikirkan dalam nilai kunci khusus dengan mengetikkan git config <key> : git config user.name Jhon Doe","title":"Pengaturan Awal Git"},{"location":"belajar/git/mengatur-git/#identitas","text":"Hal pertama yang sebaiknya Anda lakukan ketika memasang Git adalah menetapkan nama pengguna dan alamat surel. Ini penting, karena setiap commit pada Git menggunakan informasi ini, dan itu dituliskan dan tidak dapat diganti ke dalam commit yang Anda buat: Konfigurasi Nama git config --global user.name \"John Doe\" Konfigurasi Email git config --global user.email johndoe@example.com Sekali lagi, Anda hanya perlu melakukan ini sekali saja jika Anda memberikan pilihan --global , karena Git akan selalu menggunakan informasi tersebut untuk apapun yang Anda lakukan pada sistem tersebut. Jika Anda ingin menimpa ini dengan nama atau alamat surel yang berbeda untuk proyek tertentu, Anda dapat menjalankan perintah tanpa pilihan --global ketika Anda berada pada proyek tersebut. Banyak dari peralatan GUI akan membantu Anda melakukan hal ini ketika Anda menjalankannya pertama kali.","title":"Identitas"},{"location":"belajar/git/mengatur-git/#editor","text":"Sekarang, identitas Anda telah siap, Anda dapat mengatur editor teks bawaan yang akan digunakan ketika Git memerlukan Anda untuk menuliskan pesan/ Jika tidak diatur, Git menggunakan editor teks bawaan pada sistem Anda, yang pada umumnya adalah Vim. Jika Anda ingin menggunakan editor teks yang berbeda, seperti Emacs, Anda dapat melakukan hal berikut: git config --global core.editor emacs Note Vim dan Emacs adalah editor teks terkenal yang sering digunakan oleh para pengembang pada sistem berdasarkan Unix seperti Linux dan Mac. Jika Anda tidak terbiasa dengan kedua editor tersebut atau berada pada sistem Windows, Anda mungkin perlu mencari arahan tentang bagaimana cara mengatur editor kesukaan Anda dengan Git. Jika Anda tidak menetapkan editor seperti ini dan Anda tidak tahu apa itu Vim atau Emacs, Anda akan mendapatkan hal yang membingungkan ketika mereka diluncurkan.","title":"Editor"},{"location":"belajar/git/mengatur-git/#cek-pengaturan","text":"Jika Anda ingin memeriksa pengaturan Anda, Anda dapat menggunakan perintah git config --list untuk mendaftar semua pengaturan yang dapat ditemukan Git pada saat itu: git config --list user.name = John Doe user.email = johndoe@example.com color.status = auto color.branch = auto color.interactive = auto color.diff = auto ... Anda mungkin melihat kunci-kunci lebih dari satu, karena Git membaca kunci yang sama dari berkas-berkas yang berbeda ( /etc/gitconfig dan ~/.gitconfig , contohnya). Dalam hal ini, Git menggunakan nilai terakhit dari setiap kunci unik yang dia lihat. Anda juga dapat memeriksa apa yang Git pikirkan dalam nilai kunci khusus dengan mengetikkan git config <key> : git config user.name Jhon Doe","title":"Cek Pengaturan"},{"location":"belajar/git/sejarah-singkat/","text":"1.2 Sejarah Singkat Git \u00b6 Bersamaan dengan banyak hal besar dalam hidup, Git dimulai dengan sedikit kehancuran kreatifitas dan pertentangan yang ganas. Kernel Linux adalah proyek perangkat lunak sumber terbuka dalam lingkup yang cukup besar. Sebagian besar waktu pemeliharaan dari kernel Linux (1991-2002), perubahan-perubahan pada perangkat lunak diberikan sebagai patch dan berkas terarsipkan. Pada 2002, proyek kernel Linux mulai menggunakan DVCS terpatenkan bernama BitKeeper. Pada 2005, hubungan antara komunitas yang mengembangkan kernel Linux dan perusahaan komersil yang mengembangkan BitKeeper terputus, dan status bebas biaya dari alatnya dicabut. Hal ini mendesak komunitas pengembangan Linux (khususnya Linus Torvalds, pencipta Linux) untuk mengembangkan alat mereka sendiri berdasarkan beberapa pelajaran yang telah mereka pelajari ketika menggunakan BitKeeper. Beberapa sasaran dari sistem baru tersebut adalah sebagai berikut: Kecepatan Rancangan yang sederhana Dukungan yang kuat untuk pengembangan non-linier (ribuan cabang paralel) Benar-benar tersebar Mampu menangani proyek besar seperti Linux secara efisien (kecepatan dan ukuran data) Sejak kelahirannya pada 2005, Git telah berevolusi dan berkembang untuk dapat digunakan dengan mudah namun tetap memiliki kualitas awal tersebut. Git sangat cepat, sangat efisien dengan proyek-proyek besar, dan Git memiliki sistem percabangan yang hebat untuk pengembangan non-linear.","title":"Sejarah Singkat"},{"location":"belajar/git/sejarah-singkat/#12-sejarah-singkat-git","text":"Bersamaan dengan banyak hal besar dalam hidup, Git dimulai dengan sedikit kehancuran kreatifitas dan pertentangan yang ganas. Kernel Linux adalah proyek perangkat lunak sumber terbuka dalam lingkup yang cukup besar. Sebagian besar waktu pemeliharaan dari kernel Linux (1991-2002), perubahan-perubahan pada perangkat lunak diberikan sebagai patch dan berkas terarsipkan. Pada 2002, proyek kernel Linux mulai menggunakan DVCS terpatenkan bernama BitKeeper. Pada 2005, hubungan antara komunitas yang mengembangkan kernel Linux dan perusahaan komersil yang mengembangkan BitKeeper terputus, dan status bebas biaya dari alatnya dicabut. Hal ini mendesak komunitas pengembangan Linux (khususnya Linus Torvalds, pencipta Linux) untuk mengembangkan alat mereka sendiri berdasarkan beberapa pelajaran yang telah mereka pelajari ketika menggunakan BitKeeper. Beberapa sasaran dari sistem baru tersebut adalah sebagai berikut: Kecepatan Rancangan yang sederhana Dukungan yang kuat untuk pengembangan non-linier (ribuan cabang paralel) Benar-benar tersebar Mampu menangani proyek besar seperti Linux secara efisien (kecepatan dan ukuran data) Sejak kelahirannya pada 2005, Git telah berevolusi dan berkembang untuk dapat digunakan dengan mudah namun tetap memiliki kualitas awal tersebut. Git sangat cepat, sangat efisien dengan proyek-proyek besar, dan Git memiliki sistem percabangan yang hebat untuk pengembangan non-linear.","title":"1.2 Sejarah Singkat Git"},{"location":"belajar/git/version-control/","text":"1.1 Tentang Version Control \u00b6 Bab ini akan membahas tentang memulai dengan Git. Kita akan mulai dengan menjelaskan beberapa latar belakang pada peralatan version control , kemudian beralih ke bagaimana cara agar Git dapat berjalan pada sistem Anda, dan terakhir, bagaimana cara mengaturnya agar dapat mulai bekerja dengan Git. Pada akhir bab ini Anda seharusnya telah paham mengapa Git ada, mengapa sebaiknya Anda menggunakannya dan sebaiknya Anda sudah siap untuk melakukannya. Apa itu Version Control? \u00b6 Apa itu version control dan mengapa sebaiknya Anda peduli? Version control adalah sebuah sistem yang merekam perubahan-perubahan dari sebuah berkas atau sekumpulan berkas dari waktu ke waktu sehingga Anda dapat menilik kembali versi khusus suatu saat nanti. Sebagai contoh, pada buku ini Anda akan menggunakan sumber kode perangkat lunak sebagai berkas-berkas yang direkam dengan version control , walau pada kenyataannya Anda dapat melakukan ini dengan hampir semua jenis berkas pada komputer. Jika Anda adalah seorang perancang grafis atau web dan ingin menyimpan setiap versi dari sebuah gambar atau layout (yang tentunya Anda ingin melakukannya), sebuah Version Control System (VCS) adalah hal yang bijak untuk digunakan. VCS memperbolehkan Anda untuk mengembalikan berkas-berkas ke keadaan sebelumnya, mengembalikan seluruh proyek kembali ke keadaan sebelumnya, membandingkan perubahan-perubahan di setiap waktu, melihat siapa yang terakhir mengubah sesuatu yang mungkin menimbulkan masalah, siapa dan kapan yang mengenalkan sebuah isu dan banyak lagi. Menggunakan VCS secara umum juga berarti bahwa jika Anda melakukan kesalahan atau menghilangkan berkas, Anda dapat dengan mudah memulihkannya. Sebagai tambahan, Anda mendapatkan semua ini dengan biaya yang sangat sedikit. Sistem Version Control Lokal \u00b6 Metode version control yang banyak dipilih oleh orang-orang adalah dengan menyalin berkas-berkas ke direktori lain (mungkin direktori yang diberi catatan waktu, jika mereka cerdas). Pendekatan ini sangat umum karena ini sangat sederhana, namun ini juga sangat rentan terkena galat. Mudah sekali untuk lupa pada direktori mana Anda sedang berada dan menulis ke berkas yang salah atau menyalin setiap berkas yang bukan Anda maksud secara tidak sengaja. Untuk menghadapi hal ini, dahulu para programmer mengembangkan VCS lokal yang memiliki database sederhana yang menyimpan semua perubahan pada berkas pada revision control . diagram version control lokal Salah satu alat VCS yang lebih terkenal adalah sistem yang disebut dengan RCS, yang masih disebarkan dengan banyak komputer saat ini. Bahkan sistem operasi Mac OS X yang terkenal menyertakan perintah rcs ketika Anda memasang Developer Tools. RCS bekerja dengan cara menyimpan sekumpulan patch (itulah, perbedaan antara berkas-berkas) dalam sebuah format dalam diska; itu kemudian dapat membuat ulang sebarang berkas yang terlihat sama pada satu waktu dengan menambahkan semua patch . Sistem Version Control Terpusat \u00b6 Masalah besar selanjutnya yang dihadapi orang-orang adalah bahwa mereka butuh bekerja bersama dengan para pengembang pada sistem lain. Untuk menangani masalah ini, Centralized Version Control System (CVCS) dikembangkan. Sistem-sistem ini, seperti CVS , Subversion , dan Perforce , memiliki sebuah server tunggal yang berisi semua berkas-berkas yang telah diberi versi, dan beberapa klien yang melakukan check out pada berkas-berkas dari pusat tersebut. Selama bertahun-tahun, hal ini telah menjadi standar untuk version control . Diagram version control terpusat Pengaturan ini menawarkan banyak keuntungan, terutama dibandingkan dengan VCS lokal. Contohnya, setiap orang tahu hingga pada tahapan apa yang orang lain sedang kerjakan di dalam proyek. Para administrator memiliki kendali yang baik mengenai siapa dapat melakukan apa; dan itu jauh lebih mudah untuk mengelola sebuah CVCS daripada menangani database lokal pada setiap klien. Akan tetapi, pengaturan ini juga memiliki beberapa kekurangan. Yang paling jelas adalah satu titik kegagalan yang diwakili oleh server terpusat . Jika server tersebut sedang down selama satu jam, maka selama itu tidak ada orang yang dapat bekerja bersama atau menyimpan perubahan yang telah diberi versi terhadap apapun yang sedang mereka kerjakan. Jika hard disk dari database pusat menjadi corrupted , dan cadangan yang memadai belum tersimpan, Anda akan kehilangan segalanya \u2013 seluruh riwayat dari proyek kecuali setiap snapshot yang dimiliki oleh orang-orang pada mesin lokal mereka. Sistem VCS lokal menderita dari hal yang sama pula \u2013 ketika Anda memiliki semua riwayat dari proyek pada satu tempat, Anda memiliki resiko untuk kehilangan semuanya. Sistem Version Control Tersebar \u00b6 Di sinilah Distributed Version Control System (DVCS) masuk. Pada DVCS (seperti Git, Mercurial, Bazaar atau Darcs), para klien tidak hanya melakukan check out pada snapshot terakhir dari berkas: mereka mencerminkan sepenuhnya repository tersebut. Dan juga, jika ada salah satu server yang mati, dan sistem-sistem ini bekerja bersama melalui server itu, setiap repository milik klien dapat disalin kembali ke server untuk memulihkannya. Setiap check out benar-benar cadangan penuh dari semua data. Sistem version control tersebar. Selebihnya, banyak dari sistem ini mampu menangani beberapa remote repository yang dapat mereka kerjakan dengan baik, sehingga Anda dapat bekerja bersama dengan beberapa kelompok orang yang berbeda dengan cara yang berbeda secara bersamaan dalam proyek yang sama. Kemampuan ini memperbolehkan Anda untuk mengatur beberapa jenis alur kerja yang tidak mungkin dilakukan pada sistem terpusat, seperti model hirarkial.","title":"(VSC) Version Control"},{"location":"belajar/git/version-control/#11-tentang-version-control","text":"Bab ini akan membahas tentang memulai dengan Git. Kita akan mulai dengan menjelaskan beberapa latar belakang pada peralatan version control , kemudian beralih ke bagaimana cara agar Git dapat berjalan pada sistem Anda, dan terakhir, bagaimana cara mengaturnya agar dapat mulai bekerja dengan Git. Pada akhir bab ini Anda seharusnya telah paham mengapa Git ada, mengapa sebaiknya Anda menggunakannya dan sebaiknya Anda sudah siap untuk melakukannya.","title":"1.1 Tentang Version Control"},{"location":"belajar/git/version-control/#apa-itu-version-control","text":"Apa itu version control dan mengapa sebaiknya Anda peduli? Version control adalah sebuah sistem yang merekam perubahan-perubahan dari sebuah berkas atau sekumpulan berkas dari waktu ke waktu sehingga Anda dapat menilik kembali versi khusus suatu saat nanti. Sebagai contoh, pada buku ini Anda akan menggunakan sumber kode perangkat lunak sebagai berkas-berkas yang direkam dengan version control , walau pada kenyataannya Anda dapat melakukan ini dengan hampir semua jenis berkas pada komputer. Jika Anda adalah seorang perancang grafis atau web dan ingin menyimpan setiap versi dari sebuah gambar atau layout (yang tentunya Anda ingin melakukannya), sebuah Version Control System (VCS) adalah hal yang bijak untuk digunakan. VCS memperbolehkan Anda untuk mengembalikan berkas-berkas ke keadaan sebelumnya, mengembalikan seluruh proyek kembali ke keadaan sebelumnya, membandingkan perubahan-perubahan di setiap waktu, melihat siapa yang terakhir mengubah sesuatu yang mungkin menimbulkan masalah, siapa dan kapan yang mengenalkan sebuah isu dan banyak lagi. Menggunakan VCS secara umum juga berarti bahwa jika Anda melakukan kesalahan atau menghilangkan berkas, Anda dapat dengan mudah memulihkannya. Sebagai tambahan, Anda mendapatkan semua ini dengan biaya yang sangat sedikit.","title":"Apa itu Version Control?"},{"location":"belajar/git/version-control/#sistem-version-control-lokal","text":"Metode version control yang banyak dipilih oleh orang-orang adalah dengan menyalin berkas-berkas ke direktori lain (mungkin direktori yang diberi catatan waktu, jika mereka cerdas). Pendekatan ini sangat umum karena ini sangat sederhana, namun ini juga sangat rentan terkena galat. Mudah sekali untuk lupa pada direktori mana Anda sedang berada dan menulis ke berkas yang salah atau menyalin setiap berkas yang bukan Anda maksud secara tidak sengaja. Untuk menghadapi hal ini, dahulu para programmer mengembangkan VCS lokal yang memiliki database sederhana yang menyimpan semua perubahan pada berkas pada revision control . diagram version control lokal Salah satu alat VCS yang lebih terkenal adalah sistem yang disebut dengan RCS, yang masih disebarkan dengan banyak komputer saat ini. Bahkan sistem operasi Mac OS X yang terkenal menyertakan perintah rcs ketika Anda memasang Developer Tools. RCS bekerja dengan cara menyimpan sekumpulan patch (itulah, perbedaan antara berkas-berkas) dalam sebuah format dalam diska; itu kemudian dapat membuat ulang sebarang berkas yang terlihat sama pada satu waktu dengan menambahkan semua patch .","title":"Sistem Version Control Lokal"},{"location":"belajar/git/version-control/#sistem-version-control-terpusat","text":"Masalah besar selanjutnya yang dihadapi orang-orang adalah bahwa mereka butuh bekerja bersama dengan para pengembang pada sistem lain. Untuk menangani masalah ini, Centralized Version Control System (CVCS) dikembangkan. Sistem-sistem ini, seperti CVS , Subversion , dan Perforce , memiliki sebuah server tunggal yang berisi semua berkas-berkas yang telah diberi versi, dan beberapa klien yang melakukan check out pada berkas-berkas dari pusat tersebut. Selama bertahun-tahun, hal ini telah menjadi standar untuk version control . Diagram version control terpusat Pengaturan ini menawarkan banyak keuntungan, terutama dibandingkan dengan VCS lokal. Contohnya, setiap orang tahu hingga pada tahapan apa yang orang lain sedang kerjakan di dalam proyek. Para administrator memiliki kendali yang baik mengenai siapa dapat melakukan apa; dan itu jauh lebih mudah untuk mengelola sebuah CVCS daripada menangani database lokal pada setiap klien. Akan tetapi, pengaturan ini juga memiliki beberapa kekurangan. Yang paling jelas adalah satu titik kegagalan yang diwakili oleh server terpusat . Jika server tersebut sedang down selama satu jam, maka selama itu tidak ada orang yang dapat bekerja bersama atau menyimpan perubahan yang telah diberi versi terhadap apapun yang sedang mereka kerjakan. Jika hard disk dari database pusat menjadi corrupted , dan cadangan yang memadai belum tersimpan, Anda akan kehilangan segalanya \u2013 seluruh riwayat dari proyek kecuali setiap snapshot yang dimiliki oleh orang-orang pada mesin lokal mereka. Sistem VCS lokal menderita dari hal yang sama pula \u2013 ketika Anda memiliki semua riwayat dari proyek pada satu tempat, Anda memiliki resiko untuk kehilangan semuanya.","title":"Sistem Version Control Terpusat"},{"location":"belajar/git/version-control/#sistem-version-control-tersebar","text":"Di sinilah Distributed Version Control System (DVCS) masuk. Pada DVCS (seperti Git, Mercurial, Bazaar atau Darcs), para klien tidak hanya melakukan check out pada snapshot terakhir dari berkas: mereka mencerminkan sepenuhnya repository tersebut. Dan juga, jika ada salah satu server yang mati, dan sistem-sistem ini bekerja bersama melalui server itu, setiap repository milik klien dapat disalin kembali ke server untuk memulihkannya. Setiap check out benar-benar cadangan penuh dari semua data. Sistem version control tersebar. Selebihnya, banyak dari sistem ini mampu menangani beberapa remote repository yang dapat mereka kerjakan dengan baik, sehingga Anda dapat bekerja bersama dengan beberapa kelompok orang yang berbeda dengan cara yang berbeda secara bersamaan dalam proyek yang sama. Kemampuan ini memperbolehkan Anda untuk mengatur beberapa jenis alur kerja yang tidak mungkin dilakukan pada sistem terpusat, seperti model hirarkial.","title":"Sistem Version Control Tersebar"}]}